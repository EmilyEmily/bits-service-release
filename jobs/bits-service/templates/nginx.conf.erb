# deployment bits-service nginx.conf
user  vcap vcap;

error_log <%= p("bits-service.nginx.error_log_destination") %> <%= p("bits-service.nginx.error_log_level") %>;
pid       /var/vcap/sys/run/nginx_bits/nginx.pid;

events {
  worker_connections  8192;
  use epoll;
}

http {
  default_type  text/html;
  server_tokens off;

  log_format main  '<%= p("bits-service.nginx.access_log_format").chomp %>';

  access_log  <%= p("bits-service.nginx.access_log_destination") %> main;

  sendfile             on;  #enable use of sendfile()
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout  75 20; #inherited from router

  # Allow large uploads
  client_max_body_size <%= p("bits-service.max_body_size") %>;

  upstream bits_service {
    server unix:/var/vcap/sys/run/bits-service/bits-service.sock;
  }

  # Private endpoint
  server {
    listen 80;
    server_name <%= p("bits-service.private_endpoint").sub(%r{^http://}, '') %>;
    server_name_in_redirect off;

    access_log  <%= p("bits-service.nginx.private_access_log_destination") %> main;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    location /sign/ {
      auth_basic "Bits Service Signing";
      auth_basic_user_file signing_users;

      proxy_pass http://bits_service;
    }

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>/buildpack_cache|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    location ~ ^/buildpack_cache/entries {
      if ($request_method != PUT ) {
        proxy_pass http://bits_service;
        break;
      }

      # Pass altered request body to this location
      upload_pass @bits_service;
      upload_pass_args on;

      # Store files to this directory
      upload_store /var/vcap/data/bits-service/tmp/uploads;

      # No limit for output body forwarded
      upload_max_output_body_len 0;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "${upload_field_name}_name" $upload_file_name;
      upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

      # on any error, delete uploaded files
      upload_cleanup 400-505;
    }

    location ~ ^/(buildpacks|packages|droplets|app_stash/entries) {
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      # PUT

      # Pass altered request body to this location
      upload_pass @bits_service;
      upload_pass_args on;

      # Store files to this directory
      upload_store /var/vcap/data/bits-service/tmp/uploads;

      # No limit for output body forwarded
      upload_max_output_body_len 0;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "${upload_field_name}_name" $upload_file_name;
      upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

      # on any error, delete uploaded files
      upload_cleanup 400-505;
    }

    location ~ ^/app_stash {
      proxy_pass http://bits_service;
    }

    # Pass altered request body to a backend
    location @bits_service {
      proxy_pass http://unix:/var/vcap/sys/run/bits-service/bits-service.sock;
    }

    location /nginx_status {
      stub_status on;
      access_log  /var/vcap/sys/log/nginx_bits/nginx_status.access.log main;
      allow 127.0.0.1;
      deny all;
    }
  }

  # Public endpoint
  server {
    listen 80;
    server_name <%= p("bits-service.public_endpoint").sub(%r{^http://}, '') %>;
    server_name_in_redirect off;

    access_log  <%= p("bits-service.nginx.public_access_log_destination") %> main;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    location /signed/ {
      if ( $request_method !~ ^(GET|HEAD)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      rewrite ^\/signed(.*)$ $1 break; # Remove "/signed" prefix from URI

      proxy_pass http://bits_service;

      # root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    # TODO: Remove, once https://github.com/cloudfoundry-incubator/bits-service-client
    #       knows how to request signed URLs from bits-service.
    #       Re-adding this block is only to make the CI/CD pipeline green again
    #       and avoid introducing masked problems while making changes.
    location ~ ^/(buildpacks|droplets|packages) {
      set $allow 0;

      if ($request_method = GET) {
        set $allow 1;
      }

      if ($request_method = HEAD) {
        set $allow 1;
      }

      if ($allow = 0) {
        return 404;
      }

      proxy_pass http://bits_service;
    }
  }

  # catch-all
  server {
    listen      80	default_server;
    return      400;
  }
}
