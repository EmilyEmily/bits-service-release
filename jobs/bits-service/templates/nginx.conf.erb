<% if !p("bits-service.private_endpoint").start_with?("https://") %>
   ERROR bits-service.private_endpoint must start with https://
<% end %>
<% if !p("bits-service.public_endpoint").start_with?("https://") %>
   ERROR bits-service.private_endpoint must start with https://
<% end %>

# deployment bits-service nginx.conf
user  vcap vcap;

error_log <%= p("bits-service.nginx.error_log_destination") %> <%= p("bits-service.nginx.error_log_level") %>;
pid       /var/vcap/sys/run/nginx_bits/nginx.pid;

events {
  worker_connections  8192;
  use epoll;
}

http {
  default_type  text/html;
  server_tokens off;

  # rewrite_log on;

  log_format main  '<%= p("bits-service.nginx.access_log_format").chomp %>';
  log_format metrics '$request;$request_time;$bytes_sent';

  access_log <%= p("bits-service.nginx.access_log_destination") %> main;
  access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

  sendfile             on;  #enable use of sendfile()
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout  75 20; #inherited from router

  # Allow large uploads
  client_max_body_size <%= p("bits-service.max_body_size") %>;

  upstream bits_service {
    server unix:/var/vcap/sys/run/bits-service/bits-service.sock;
  }

  server_names_hash_bucket_size  128;

  # Private endpoint
  server {
    listen      <%= p('bits-service.tls.port') %> ssl;
    server_name <%= p("bits-service.private_endpoint").sub(%r{^https://}, '') %>;
    server_name_in_redirect off;

    ssl_certificate     /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.crt;
    ssl_certificate_key /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.key;

    # TODO: nosu any changes needed?
    ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    # TODO: Only Support for TLS 1.2
    ssl_protocols TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    access_log  <%= p("bits-service.nginx.private_access_log_destination") %> main;
    access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    location /sign/ {
      auth_basic "Bits Service Signing";
      auth_basic_user_file signing_users;

      proxy_pass http://bits_service;
    }

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>/buildpack_cache|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    location /buildpack_cache/entries {
      # add_header X-debug-private-buildpack_cache "Hit" always;
      if ($request_method != PUT ) {
        proxy_pass http://bits_service;
        break;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpack_cache.max_body_size") %>;
    }
    location /buildpacks {
      # add_header X-debug-private-buildpacks "Hit" always;
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpacks.max_body_size") %>;
    }
    location /packages {
      # add_header X-debug-private-packages "Hit" always;
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.packages.max_body_size") %>;
    }
    location /droplets {
      # add_header X-debug-private-droplets "Hit" always;
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.droplets.max_body_size") %>;
    }
    location /app_stash/entries {
      # add_header X-debug-private-app_stash "Hit" always;
      if ($content_type !~ "multipart/form-data") {
        proxy_pass http://bits_service;
      }
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.app_stash.max_body_size") %>;
    }

    location /app_stash {
      proxy_pass http://bits_service;
    }

    # Pass altered request body to a backend
    location @bits_service {
      proxy_pass http://unix:/var/vcap/sys/run/bits-service/bits-service.sock;
    }

    location /nginx_status {
      stub_status on;
      access_log  /var/vcap/sys/log/nginx_bits/nginx_status.access.log main;
      allow 127.0.0.1;
      deny all;
    }
  }

  # Public endpoint
  server {
    listen      <%= p('bits-service.tls.port') %> ssl;
    server_name <%= p("bits-service.public_endpoint").sub(%r{^https://}, '') %>;

    ssl_certificate     /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.crt;
    ssl_certificate_key /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.key;

    # TODO: nosu any changes needed?
    ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    # TODO: Only Support for TLS 1.2
    ssl_protocols TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    server_name_in_redirect off;

    access_log  <%= p("bits-service.nginx.public_access_log_destination") %> main;
    access_log <%= p("bits-service.nginx.metrics_log_destination") %> metrics;

    <% if p("request_timeout_in_seconds").to_i > 0 %>
      proxy_send_timeout          <%= p("request_timeout_in_seconds") %>;
      proxy_read_timeout          <%= p("request_timeout_in_seconds") %>;
    <% end %>

    # local resource downloads
    location ~ "/(<%= p("bits-service.buildpacks.directory_key") %>|<%= p("bits-service.droplets.directory_key") %>|<%= p("bits-service.packages.directory_key") %>)/\w{2}/\w{2}/.*" {
      internal;
      root /var/vcap/store/bits-service/;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;
    }

    # Pass altered request body to a backend
    location @bits_service {
      # add_header X-debug-message "hit bits_service" always;
      proxy_pass http://unix:/var/vcap/sys/run/bits-service/bits-service.sock;
    }

    location /signed/buildpack_cache/entries {
      # add_header X-debug-public-buildpack_cache "Hit" always;
      dav_methods PUT;
      create_full_put_path on;

      if ( $request_method !~ ^(GET|HEAD|PUT)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      rewrite ^\/signed(.*)$ $1; # Remove "/signed" prefix from URI

      if ( $request_method != PUT ) {
        proxy_pass http://bits_service;
      }
      # PUT
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpack_cache.max_body_size") %>;

      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;

      break;
    }
    location /signed/buildpacks {
      # add_header X-debug-public-buildpacks "Hit" always;
      dav_methods PUT;
      create_full_put_path on;

      if ( $request_method !~ ^(GET|HEAD|PUT)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      rewrite ^\/signed(.*)$ $1; # Remove "/signed" prefix from URI

      if ( $request_method != PUT ) {
        proxy_pass http://bits_service;
      }
      # PUT
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.buildpacks.max_body_size") %>;

      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;

      break;
    }
    location /signed/packages {
      # add_header X-debug-public-packages "Hit" always;
      dav_methods PUT;
      create_full_put_path on;

      if ( $request_method !~ ^(GET|HEAD|PUT)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      rewrite ^\/signed(.*)$ $1; # Remove "/signed" prefix from URI

      if ( $request_method != PUT ) {
        proxy_pass http://bits_service;
      }
      # PUT
      add_header X-debug-message-1 "Hit bits-service public packages location" always;
      include "location_stub.conf";
      client_max_body_size <%= p("bits-service.packages.max_body_size") %>;

      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;

      break;
    }
    location /signed/droplets {
      # add_header X-debug-public-droplets "/signed/droplets" always;
      dav_methods PUT;
      create_full_put_path on;

      if ( $request_method !~ ^(GET|HEAD|PUT)$ ) {
        return 405;
      }

      secure_link $arg_md5,$arg_expires;
      secure_link_md5 "$secure_link_expires$uri <%= p("bits-service.secret") %>";

      if ($secure_link = "") {
        return 403;
      }

      if ($secure_link = "0") {
        return 410;
      }

      if ( $request_method != PUT ) {
        proxy_pass http://bits_service;
      }

      # PUT
      client_max_body_size <%= p("bits-service.droplets.max_body_size") %>;
      proxy_pass_header HTTP_X_VCAP_REQUEST_ID;
      add_header HTTP_X_VCAP_REQUEST_ID $HTTP_X_VCAP_REQUEST_ID;

      location ~ /signed/droplets/((?!\/).)*$ {
        rewrite ^\/signed(.*)$ $1 break; # Remove "/sign" prefix from URI
        #add_header X-debug-public-droplets "/signed/droplets/:guid" always;
        client_body_in_file_only clean;
        client_body_temp_path /var/vcap/data/bits-service/tmp/uploads;
        proxy_set_header DROPLET_FILE $request_body_file;
        proxy_set_header Content-Type application/octet-stream;
        proxy_pass http://bits_service;
      }

      location ~ /signed/droplets/.*/.* {
        rewrite ^\/signed(.*)$ $1 break; # Remove "/sign" prefix from URI
        # add_header X-debug-public-droplets "/signed/droplets/:guid/:sha" always;
        include "location_stub.conf";
      }
    }
  }

  # catch-all
  server {
    listen      <%= p('bits-service.tls.port') %> ssl default_server;

    ssl_certificate     /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.crt;
    ssl_certificate_key /var/vcap/jobs/bits-service/config/certs/nginx_bits_tls.key;

    # TODO: nosu any changes needed?
    ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    # TODO: Only Support for TLS 1.2
    ssl_protocols TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    return      400;
  }
}
