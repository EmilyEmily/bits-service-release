#!/bin/bash
#
# Pipe ngingx metrics into statsd
#
# If the request
#
#   PUT /droplets/7100a3b3-1eeb-49b1-ad52-747a1071a854 HTTP/1.1
#
# took 0.120s, we'd like to send a `timing` metric to statsd:
#
#   droplets-time:0.120|s
#
# The size in bytes is reported as separate `gauge` metric:
#
#   droplets-size:348|g
#
# Metric types are defined per https://github.com/etsy/statsd/blob/master/docs/metric_types.md
#

if [ $# -ne 1 ]; then
  echo "Error: Missing Argument."
  echo "Usage: statsd_pipe METRICS_LOG_FILE"
  exit 1
fi

#
# Grab the resource type from a request given as $1, e.g.
#
# PUT /droplets/7100a3b3-1eeb-49b1-ad52-747a1071a854/ HTTP/1.1
#
resource_type() {
  local uri_regexp='^([A-Z]+) \/([a-z_]+)\/'
  [[ "$1" =~ ${uri_regexp} ]];

  echo "${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
}

tail -n0 -q --retry -F $1 2>/dev/null | while read in; do
  IFS=\; read -a fields <<<"$in"

  request="${fields[0]}"
  resource_type=$(resource_type "$request")
  # multiply by 1000 to get ms, the only format possible with statsd timings
  time=$(echo ${fields[1]} 1000 | awk '{printf "%.0f\n",$1*$2}')
  bytes_sent="${fields[2]}"
  bytes_received="${fields[3]}"
  status="${fields[4]}"

  # if request did not refer to a resource
  if [ "$resource_type" == "-" ]; then
    continue
  fi

  printf "bits.$resource_type-time.sparse-avg:$time|ms" | socat -t 0 - UDP:127.0.0.1:8125
  printf "bits.$resource_type-$status-time.sparse-avg:$time|ms" | socat -t 0 - UDP:127.0.0.1:8125
  printf "bits.$resource_type-size:$bytes_sent|g" | socat -t 0 - UDP:127.0.0.1:8125
  printf "bits.$resource_type-request-size:$bytes_received|g" | socat -t 0 - UDP:127.0.0.1:8125
  printf "bits.status-$status:1|c" | socat -t 0 - UDP:127.0.0.1:8125
done
